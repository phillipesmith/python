#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Author: Phillipe Smith <phillipelnx@gmail.com> 
# Description: Script to generate a xml file for fusioninventory based on snmpwalk -OQ ... and/or dmidecode file
#

import sys, os, re
from datetime import date, datetime
from optparse import OptionParser

try:    
    from lxml.etree import Element, SubElement, Comment, tostring, parse
except Exception, e:
    sys.exit('ERROR: python-lxml is not installed or not found.')

# Set date and time formated like yyyy-mm-dd hh:mm:ss
current_date_time = str(datetime.now()).split('.')[0]
current_date = current_date_time.split(' ')[0]
current_time = '-'.join(current_date_time.split(' ')[1].split(':'))

# Set options to parse
parser = OptionParser()
parser.add_option('-d', '--dmi', dest='dmifile', help='DMIDecode file')
parser.add_option('-f', '--oid', dest='oidfile', help='OID file')
parser.add_option('-o', '--output', dest='outputfile', help='Output file dest/name')
parser.add_option('-i', '--deviceid', dest='deviceid', help='DeviceID: Format date-time ex.: 2013-10-11-17-00-00')
options, args = parser.parse_args()

oidfile    = options.oidfile
dmifile    = options.dmifile
outputfile = options.outputfile
deviceid   = options.deviceid if options.deviceid != None else '%s-%s' % (current_date, current_time)

if oidfile == None or outputfile == None:
    parser.print_help()
    parser.exit()

# Get SNMP OID file as the first argument
oidfile = open(oidfile, 'r')

# Generate XML file main tags
request    = Element('REQUEST')
content    = SubElement(request, 'CONTENT')
accesslog  = SubElement(content, 'ACCESSLOG')
logdate    = SubElement(accesslog, 'LOGDATE').text = current_date_time
bios       = SubElement(content, 'BIOS')
hardware   = SubElement(content, 'HARDWARE')

# Define variables to store OID values
processorn    = 0 
ipaddr        = {}
netmask       = {}
ifInfo        = {}
hrStorage     = {}
hrPartitions  = {}
hrSWInstalled = []

# Variables definition to store information from DMIDecode file
biosinfo     = []
sysinfo      = []
mboardinfo   = []
chassisinfo  = []
memoriesinfo = {}
cpusinfo     = {}

# Processing DMIDECODE informations (if demidecode file is specified)
bdate, bmanufacturer, bversion = '', '', ''
mmanufacturer, mmodel, mserial = '', '', ''
uuid, chtype, chassettag = '', '', ''
skunumber, smanufacturer, smodel, sserial = '', '', '', ''

if dmifile:
    with open(dmifile) as dmifile:
        count    = 0
        nextline = ''

        for line in dmifile:
            line = line.strip()
            if 'BIOS Information' in line:
                for i in range(3):
                    biosinfo.append(next(dmifile).split(':')[1].strip())
                bmanufacturer, bversion, bdate = biosinfo[0], biosinfo[1], biosinfo[2]
            elif 'Handle 0x0000, DMI type 0' in line and 'Header and Data' in next(dmifile):
                nextline = next(dmifile)
                while not 'Handle' in nextline:
                    nextline = next(dmifile).strip().replace(' ','')
                    if '"' in nextline:
                        biosinfo.append(nextline.strip('"'))
                bmanufacturer, bversion, bdate = biosinfo[0], biosinfo[2], biosinfo[4]
            if 'System Information' in line:
                for i in range(8):
                    sysinfo.append(next(dmifile).split(':')[1].strip())
                smanufacturer, smodel, sserial, skunumber, uuid = sysinfo[0], sysinfo[1], sysinfo[3], sysinfo[6], sysinfo[4]
            elif 'Handle0x0100,DMItype1' in nextline and 'Header and Data' in next(dmifile):
                nextline = next(dmifile)
                while not 'Handle' in nextline:
                    nextline = next(dmifile).strip().replace(' ','')
                    if '"' in nextline: 
                        sysinfo.append(nextline.strip('"'))
                smanufacturer, smodel, sserial, skunumber, uuid = sysinfo[0], sysinfo[2], sysinfo[4], sysinfo[3], sysinfo[1]
            if 'Base Board Information' in line:
                for i in range(4):
                    mboardinfo.append(next(dmifile).split(':')[1].strip())
                mmanufacturer, mmodel, mserial = mboardinfo[0], mboardinfo[1], mboardinfo[3]
            elif 'Handle0x0200,DMItype2' in nextline and 'Header and Data' in next(dmifile):
                nextline = next(dmifile)
                while not 'Handle' in nextline:
                    nextline = next(dmifile).strip().replace(' ','')
                    if '"' in nextline:
                        mboardinfo.append(nextline.strip('"'))
                mmanufacturer, mmodel, mserial = mboardinfo[0], mboardinfo[2], mboardinfo[4]
            if 'Chassis Information' in line:
                for i in range(14):
                    chassisinfo.append(next(dmifile).split(':')[1].strip())
                chmanufacturer, chtype, chserial, chassettag = chassisinfo[0], chassisinfo[1], chassisinfo[4], chassisinfo[5]
            elif 'Handle0x0300,DMItype3' in nextline and 'Header and Data' in next(dmifile):
                nextline = next(dmifile)
                while not 'Handle' in nextline:
                    nextline = next(dmifile).strip().replace(' ','')
                    if '"' in nextline:
                        chassisinfo.append(nextline.strip('"'))
                chmanufacturer, chtype, chserial, chassettag = chassisinfo[0], chassisinfo[1], chassisinfo[2], chassisinfo[3]
            if 'Memory Device' in line:
                memoriesinfo[count] = []
                for i in range(16):
                    memoriesvalue = next(dmifile).split(':')
                    memoriesinfo[count] += [memoriesvalue[1].strip()] if len(memoriesvalue) > 1 else ''
                if not 'DIMM' in memoriesinfo[count]:
                   memoriesinfo.pop(count)
                count += 1
            if 'Processor Information' in line:
                count += 1
                cpusinfo[count] = {}
                nextline = next(dmifile)
                while 'Handle 0x' not in nextline:
                    if ':' in nextline and not 'Flags' in nextline:
                        nextlinevalue = nextline.strip().split(': ')
                        key   = nextlinevalue[0].lower().replace(' ', '')
                        value = nextlinevalue[1] if len(nextlinevalue) > 1 else ''
                        if value.startswith('CPU'):
                            processorn += 1
                        cpusinfo[count].update({key: value})
                    nextline = next(dmifile)
            elif 'DMItype4,' in nextline and 'Header and Data' in next(dmifile):
                nextline = next(dmifile)
                cpuinfo  = []
                while not 'DMI type 7,' in nextline:
                    nextline = next(dmifile).strip()
                    if '"' in nextline:
                        nextline = nextline.strip('"')
                        if nextline.startswith('CPU'):
                            processorn += 1
                        else:
                            if not nextline in cpuinfo:
                                cpuinfo.append(nextline)
                            else:
                                cpusinfo[count] = {} 
                                info = [x for x in cpuinfo[1].split(' ') if x is not '']
                                cpusinfo[count].update({
                                    'manufacturer':  cpuinfo[0],
                                    'family': info[1].strip('(R)'),
                                    'externalclock': info[5],
                                    'version': cpuinfo[1],
                                    'currentspeed': str(float(info[5].strip('GHz')) * 1000) + ' ' ,
                                })
                                count += 1
        dmifile.close()

# Generate XML BIOS informations 
SubElement(bios, 'ASSETTAG').text = chassettag if chassettag != 'Not Specified' else ''
SubElement(bios, 'BDATE').text = bdate
SubElement(bios, 'BMANUFACTURER').text = bmanufacturer
SubElement(bios, 'BVERSION').text = bversion
SubElement(bios, 'MMANUFACTURER').text = mmanufacturer
SubElement(bios, 'MMODEL').text = chtype
SubElement(bios, 'MSN').text = mserial
SubElement(bios, 'SKUNUMBER').text = skunumber if skunumber != 'Not Specified' else ''
SubElement(bios, 'SMANUFACTURER').text = smanufacturer
SubElement(bios, 'SMODEL').text = smodel
SubElement(bios, 'SSN').text = sserial

# Read OID file lines
for line in oidfile:

    if len(line) < 10 or not '=' in line:
        continue

    line  = line.replace('"', '').strip('\n').split('= ')
    mib   = line[0].strip()
    value = line[1].strip() 
    index = mib.split('.')

    #if 'SNMPv2-SMI::enterprises.2620.1.6.13.0' in mib:
    #    SubElement(bios, 'SSN').text = value
    if 'sysDescr' in mib:
        if 'Linux' in value:
            descr      = value.split(' ')
            osname     = descr[0]
            osversion  = descr[2]
            oscomments = ' '. join(descr[3:])
        else:
            osname     = value
            osversion  = ''
            oscomments = ''
    if 'sysName' in mib:
        name = value
    if 'hrDeviceDescr' in mib:
        if 'CPU' in value:
            if len(value.split()) > 7: 
                devname = ' '.join(value.split()[3:]) 
            else: 
                devname = ' '.join(value.split()[1:])
            #devname     = value.split(': ')[1]
            info        = [x for x in devname.split(' ') if x != '']
            processort  = devname
            processors  = str(int(float(info[-1].replace('GHz','').replace('GH','')) * 1000))
            if processorn == 0:
                processorn += 1
            if not dmifile or cpusinfo.values()[0].get('family', '') == 'Unknown':
                cpus = SubElement(content, 'CPUS')
                SubElement(cpus, 'FAMILYNAME').text  = info[1].replace('(R)', '')
                SubElement(cpus, 'MANUFACTURER').text  = info[0].replace('(R)', '')
                SubElement(cpus, 'NAME').text  = devname
                SubElement(cpus, 'SPEED').text  = processors
    if 'hrMemorySize' in mib:
        memory = value.split(' ')[0]
    if 'hrStorageDesc' in mib:
        key = index[1]
        hrStorage.update({key: [value]})
    if 'hrStorageAllocationUnits' in mib:
        key   = index[1]
        value = value.split(' ')[0]
        if key in hrStorage.keys():
            hrStorage[key] += [value]
    if 'hrStorageSize' in mib:
        key   = index[1]
        value = value.split(' ')[0]
        if key in hrStorage.keys():
            hrStorage[key] += [value]
    if 'hrStorageUsed' in mib:
        key   = index[1]
        value = value.split(' ')[0]
        if key in hrStorage.keys():
            hrStorage[key] += [value]
        else:
            hrStorage[key] += ['']
    if 'hrPartitionLabel' in mib:
        if 'fwin' in name.lower():
            key = index[2]
            hrPartitions[key] = [value]
        else:
            key = index[1]
    if 'hrFSMountPoint' in mib:
        key = index[1]
        value = value
        if 'fwin' in name.lower():
            if key in hrPartitions:
                hrPartitions[key] += [value]
        else:
            hrPartitions[key] = [value]
    if 'ifDescr' in mib:
        key = index[1]
        ifInfo[key] = {'descr': value}
    if 'ipAdEntIfIndex' in mib and not 'No Such Object available' in value:
        index = value
        if index in ipaddr:
            ipaddr[index] += ', ' + mib.split('ipAdEntIfIndex.')[1]
        else:
            ipaddr[index] = mib.split('ipAdEntIfIndex.')[1]
        ifInfo[index].update({'ipaddr': ipaddr[index]})
    if 'ipAdEntNetMask' in mib and not 'No Such Object available' in value:
        ipaddr = mib.split('ipAdEntNetMask.')[1]        
        key = [ key for key,items in ifInfo.iteritems() if items.get('ipaddr') != None and ipaddr in items.get('ipaddr') ][0]
        if key in netmask:
            netmask[key] += ', ' + value
        else:
            netmask[key] = value
        ifInfo[str(key)].update({'netmask': netmask[key]})
    if 'ifType' in mib:
        key = index[1]
        ifInfo[key].update({'type': value})
    if 'ifPhysAddress' in mib:
        key   = index[1]
        value =  value.split(':')
        
        for i in range(len(value)):
            if len(value[i]) == 1:
                value[i] = '0' + value[i]

        ifInfo[key].update({'macaddr': ':'.join(value)})
    if 'ifSpeed' in mib: 
        key = index[1]
        ifInfo[key].update({'speed': value})
    if 'ifOperStatus' in mib: 
        key = index[1]
        ifInfo[key].update({'status': value})
    if 'hrSWInstalledName' in mib:
        key    = index[1]
        swname = value
        hrSWInstalled.append(swname) 

# Generate XML HARDWARE information
SubElement(hardware, 'ARCHNAME')
SubElement(hardware, 'CHASSIS_TYPE').text = chtype
SubElement(hardware, 'CHECKSUM')
SubElement(hardware, 'DATELASTLOGGEDUSER')
SubElement(hardware, 'DEFAULTGATEWAY')
SubElement(hardware, 'DESCRIPTION') 
SubElement(hardware, 'DNS').text = '10.1.3.46/10.1.3.5'
SubElement(hardware, 'ETIME')
SubElement(hardware, 'LASTLOGGEDUSER')
SubElement(hardware, 'MEMORY').text = memory
SubElement(hardware, 'NAME').text = name
SubElement(hardware, 'OSCOMMENTS').text = oscomments
SubElement(hardware, 'OSNAME').text = osname
SubElement(hardware, 'OSVERSION').text = osversion
SubElement(hardware, 'PROCESSORN').text = str(processorn)
SubElement(hardware, 'PROCESSORS').text = processors
SubElement(hardware, 'PROCESSORT').text = processort
SubElement(hardware, 'SWAP')
SubElement(hardware, 'UUID').text = uuid
SubElement(hardware, 'VMSYSTEM')

# Generate XML CPUS information
for info in cpusinfo.values():
    externalclock = info['externalclock'].split(' ')[0] if 'externalclock' in info else ''
    familyname    = info['family'] if 'family' in info else ''
    familynumber  = info['signature'].split(',')[1].split(' ')[1] if 'signature' in info else ''
    id            = info['id'] if 'id' in info else ''
    manufacturer  = info['manufacturer'] if 'manufacturer' in info else ''
    model         = info['signature'].split(',')[2].split(' ')[1] if 'signature' in info else ''
    version       = info['version'] if 'version' in info else ''
    currentspeed  = info['currentspeed'].split(' ')[0] if 'currentspeed' in info else ''
    stepping      = info['signature'].split(', ')[3].split(' ')[1] if 'signature' in info else ''

    if manufacturer != 'Not Specified' and familyname != 'Unknown':
        cpus = SubElement(content, 'CPUS')
        SubElement(cpus, 'CORE')
        SubElement(cpus, 'EXTERNAL_CLOCK').text = externalclock
        SubElement(cpus, 'FAMILYNAME').text     = familyname
        SubElement(cpus, 'FAMILYNUMBER').text   = familynumber
        SubElement(cpus, 'ID').text             = id
        SubElement(cpus, 'MANUFACTURER').text   = manufacturer
        SubElement(cpus, 'MODEL').text          = model
        SubElement(cpus, 'NAME').text           = version
        SubElement(cpus, 'SPEED').text          = currentspeed
        SubElement(cpus, 'STEPPING').text       = stepping
        SubElement(cpus, 'THREAD')

# Generate XML NETWORKS information
for info in ifInfo.values():
    if not 'ipaddr' in info:
        info['ipaddr'] = ''
    if not 'netmask' in info:
        info['netmask'] = ''
   
    networks = SubElement(content, 'NETWORKS')
    SubElement(networks, 'DESCRIPTION').text = info['descr']
    if info['descr'] == 'eth0': SubElement(hardware, 'IPADDR').text = info['ipaddr']
    SubElement(networks, 'IPADDRESS').text = info['ipaddr']
    SubElement(networks, 'IPMASK').text = info['netmask']
    SubElement(networks, 'DRIVER')
    SubElement(networks, 'IPSUBNET')
    SubElement(networks, 'MACADDR').text = info['macaddr']
    SubElement(networks, 'PCISLOT')
    SubElement(networks, 'SLAVES')
    SubElement(networks, 'STATUS').text = info['status'].split('(')[0].capitalize()
    SubElement(networks, 'VIRTUALDEV')
    SubElement(networks, 'TYPE').text = info['type']
    SubElement(networks, 'SPEED').text = info['speed']

# Generate XML MEMORIES information
for key, info in memoriesinfo.iteritems():
        memories = SubElement(content, 'MEMORIES')
        SubElement(memories, 'CAPACITY').text = info[4].replace(' MB', '')
        SubElement(memories, 'CAPTION').text = info[7]
        SubElement(memories, 'DESCRIPTION').text = info[5]
        SubElement(memories, 'MEMORYCORRECTION')
        SubElement(memories, 'NUMSLOTS').text = str(key)
        SubElement(memories, 'SERIALNUMBER').text = info[13] if len(info) > 13 else ''
        SubElement(memories, 'SPEED').text = info[11]
        SubElement(memories, 'TYPE').text = info[9] if not 'OUT OF SPEC' in info[9] else ''

# Generate XML DRIVES information
for key, info in hrStorage.iteritems():
    if int(key) > 30:
        for index, mountpoint in hrPartitions.items():
            free   = str(int(info[2]) - int(info[3]))
            total  = info[2]
            type   = mountpoint[1] if len(mountpoint) > 1 else mountpoint[0]
            volumn = mountpoint[0] if len(mountpoint) > 1 else ''
            
            if type == info[0]:
                drives = SubElement(content, 'DRIVES')
                SubElement(drives, 'FILESYSTEM')
                SubElement(drives, 'FREE').text = free
                SubElement(drives, 'TOTAL').text = total
                SubElement(drives, 'SERIAL')
                SubElement(drives, 'TYPE').text = type
                SubElement(drives, 'VOLUMN').text = volumn

# Generate XML SOFTWARES information
for software in hrSWInstalled:
    if 'vmware' in osname.lower():
        fscount  = software.count(',') # Count Field Separator
        software = software.split(',')

        if 'SUSE LINUX Products GmbH' in software:
            swname = software[3]
            swver  = '-'.join(software[4:])
        elif len(software[:-2]) == 3:            
            swname = software[2]
            swver  = '-'.join(software[-2:])
        else:
            swname = software[1]
            swver  = '-'.join(software[-1:])
    else:
        fscount  = software.count('-') # Count Field Separator
        software = software.split('-')
        
        if fscount == 6:
            swname = '-'.join(software[0:5])
            swver  = '-'.join(software[6:])
        elif fscount == 5:
            swname = '-'.join(software[0:4])
            swver  = '-'.join(software[5:])
        elif fscount == 4:
            swname = '-'.join(software[0:3])
            swver  = '-'.join(software[4:])
        elif fscount == 3:
            swname = '-'.join(software[0:2])
            swver  = '-'.join(software[3:])
        else:
            swname = software[0]
            swver  = '-'.join(software[1:])
     
    softwares = SubElement(content, 'SOFTWARES')
    SubElement(softwares, 'ARCH')
    SubElement(softwares, 'COMMENT')
    SubElement(softwares, 'FILESIZE')
    SubElement(softwares, 'FROM')
    SubElement(softwares, 'NAME').text = swname
    SubElement(softwares, 'VERSION').text = swver.strip('.-')

# Generate XML final tags
SubElement(content, 'VERSIONCLIENT').text = 'FusionInventory-Agent_v2.2.7'
if os.path.isfile(outputfile):
    xmldeviceid = parse(outputfile).findtext('DEVICEID')
    if not xmldeviceid == '':
        SubElement(request, 'DEVICEID').text = "%s" % xmldeviceid
    else:
        SubElement(request, 'DEVICEID').text = "%s-%s" %(name, deviceid)
else:
    SubElement(request, 'DEVICEID').text = "%s-%s" %(name, deviceid)
SubElement(request, 'QUERY').text = 'INVENTORY'

# Write XML to file
try:
    output = open(outputfile, 'w')
    output.write(tostring(request, pretty_print=True, xml_declaration=True, encoding='UTF-8'))
    output.close()
    print "XML File %s generated successfully!" % outputfile
except Exception, e:
    sys.exit("ERROR: some problems ocurred while generating output xml file.\n\n%s" % e)
