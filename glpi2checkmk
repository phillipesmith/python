#!/usr/bin/python                                                                                                                                                                                              
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# 
# Author: Phillipe Smith <phillipelnx@gmail.com>
# Description: Script to Add hosts from GLPI Database to Check_MK WATO hosts.mk
#

import sys, os, fileinput, subprocess, re
from optparse import OptionParser

class glpi2checkmk:
    ''' Class to verify and add hosts from GLPI database that aren't on Nagios/Check_MK '''

    livesocket = '/var/spool/nagios/cmd/live'
    watodir    = '/etc/check_mk/conf.d/wato/'
    hostsmk    = watodir + 'hosts.mk'

    def __init__(self):
        ''' Set Check_MK WATO path and main WATO hosts.mk, and others variables to store data '''
        self.validate =  False
        self.uid      =  48  # Apache user
        self.gid      =  498 # Nagios group

        self.glpidb   =  { 'host': 'viper', 
                           'db':   'glpi', 
                           'user': 'root', 
                           'pass': 'root' }

        self.nagiosdb =  { 'host': 'localhost', 
                           'db':   'nagios', 
                           'user': 'root', 
                           'pass': '' }

        ''' Options to parse to the script '''
        self.parser = OptionParser()
        self.parser.add_option('--debug', action='store_true', dest='debug', help='Debug mode (No write to files)')
        self.parser.add_option('-w', '--write', action='store_true', dest='writefile', help='Write the changes to the hosts.mk file')
        self.parser.add_option('-u', '--update', action='store_true', dest='update', help='Update Nagios configuration')
        self.parser.add_option('-o', '--only', dest='onlyhost', help='Select only hosts that starts with criteria. Ex.: glpi2checkmk -o CEDI (require --debug or -w)')
        self.parser.add_option('-d', '--hostdir', dest='hostdir', help='Manually define the dir to add the new host(s). If the directory does nost exists, It will be created. (require --debug or -w)')
        (self.option, self.parse) = self.parser.parse_args()

        if len(sys.argv) <= 1:
            sys.exit(self.parser.print_help())

        self.debug    = True if self.option.debug else False
        self.onlyhost = self.option.onlyhost.upper() if self.option.onlyhost is not None else None
        self.hostdir  = self.option.hostdir if self.option.hostdir is not None else False
        self.count    = 0

    def datadiff(self):
        ''' Connect to glpi and nagios databases to generate a list with hosts that are on glpi and not on check_mk '''
        
        hostscmk  = []
        hostsglpi = []

        ''' Trying import python mysql module '''
        try:
            import mysql.connector
        except Exception, e:
            sys.exit('\nERROR: need mysql-connector-python to use MySQL Database.\n')

        ''' Setting databases connection variables '''
        glpidb   = mysql.connector.connect( host=self.glpidb['host'],   user=self.glpidb['user'],   password=self.glpidb['pass'],   database=self.glpidb['db'] )
        #nagiosdb = mysql.connector.connect( host=self.nagiosdb['host'], user=self.nagiosdb['user'], password=self.nagiosdb['pass'], database=self.nagiosdb['db'] )

        ''' Creating glpi database query '''
        sql = 'SELECT UPPER(name) FROM glpi_computers'
        glpicursor = glpidb.cursor()
        glpicursor.execute(sql)

        #''' Creating nagios database query '''
        #sql = 'SELECT UPPER(display_name) FROM nagios_hosts'
        #nagioscursor = nagiosdb.cursor()
        #nagioscursor.execute(sql)
        
        ''' Getting host names from livestatus and store the result on hostscmk list'''
        query    = 'GET hosts\nColumns: name\n'
        hostscmk = self.livestatus(query).strip().split('\n')

        #''' Store all hosts found on nagios database on hostscmk list '''
        #for host in nagioscursor.fetchall():
        #    hostname = host[0].encode('utf-8')
        #    hostscmk.append(hostname)

        ''' Store all hosts found on glpi database on hostsglpi list '''
        for host in glpicursor.fetchall():
            hostname = host[0].encode('utf-8')
            if hostname not in hostscmk and ('-' in hostname or '_' in hostname):
                hostsglpi.append(hostname)
        
        return sorted(list(set(hostsglpi)))

    def hostsfile(self, host):
        ''' Determine which file that the host came from glpi must be added in '''
        for dir in os.listdir(self.watodir):
            if not '.' in dir:
                file = self.watodir + dir + '/hosts.mk'
                if os.path.exists(file):
                    with open(file) as f:
                        for line in f:
                            if host in line:
                                return file
            
        return self.hostsmk

    def add_to_file(self, host):
        ''' Add the glpi host to the hosts.mk file, determined by the method hostsfile() '''
        if host:
            hostsplit = host.split('_') if '_' in host else host.split('-')
            prefix    = hostsplit[1] if len(hostsplit) > 2 else hostsplit[0]
            section   = ''
            file      = self.hostsfile(prefix) 
            self.validate = True
            
            if self.hostdir:
                dir  = self.watodir + self.hostdir
                file = dir + '/hosts.mk'

                if not os.path.exists(dir) and not self.debug:
                    os.umask(0)
                    os.mkdir(dir, 0770)
                    os.chown(dir, self.uid, self.gid)
                    with open(file, 'w') as f:
                        f.write('# Written by WATO\n# encoding: utf-8\n\nall_hosts += [\n]\n')
            
            if file is not None: 
                section = file.split('/')[5] if file.split('/')[5] != 'hosts.mk' else ''

            hostline = '  "%s|lan|cmk-agent|gesoft|%s|dyndns|tcp|prod|wato|/" + FOLDER_PATH + "/",' % (host, section)

            if not self.debug and self.option.writefile:
                for line in fileinput.input(file, inplace=1):
                    print line,
                    if 'all_hosts += [' in line:
                        print hostline

                os.chown(file, self.uid, self.gid)
                print '>> Added host %s to %s' % (host, file)
            elif self.debug:
                self.count += 1
                print '(DEBUG)>  HOST: %s\tFILE: %s' % (host, file)
            else:
               sys.exit(self.parser.print_help())

    def livestatus(self, query, socketpath = livesocket):
        ''' Connect to Livestatus socket and send queries to that '''
        import socket
        
        try:
            s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)        
            s.connect(socketpath)
            s.send(query)
            s.shutdown(socket.SHUT_WR)
            return s.recv(100000000)        
        except socket.error as e:
            sys.exit(e)

    def run(self):
        ''' Execute all the routines to check and add hosts from glpi database to check_mk wato '''

        ''' Made a new list with only the hosts that doesn't exists on Nagios and adding those new hosts to respective hosts.mk files '''
        print ''
        for host in self.datadiff():
            if '-' in host or '_' in host:
                if self.onlyhost is None:
                    self.add_to_file(host)
                elif re.search(self.onlyhost, host):
                    self.add_to_file(host)

        ''' Update nagios configs with "cmk -O" if self.validate var is True and debg is False '''
        if self.validate:
            if not self.debug and self.option.writefile:
                print ''
                if self.option.update: 
                    subprocess.call(["cmk", "-O"])
            elif self.debug:
                print '\n%d new hosts.\n' % self.count
        else:
            print '>> No new host from GLPI database to be added to Nagios.\n'

if __name__ == '__main__':
    ''' Check if the script is running as root '''
    if os.getuid() is not 0:
        sys.exit('\nERRO: O script deve ser executado como root.\n')
    else:
        app = glpi2checkmk()
        app.run()

